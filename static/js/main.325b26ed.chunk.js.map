{"version":3,"sources":["common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","common/c4-SuperEditableSpan/SuperEditableSpan.module.css","common/c7-SuperRange/SuperRange.module.css","auth/login/Login.tsx","auth/recovery-password /RecoveryPassword.tsx","auth/recovery-password /NewPassword.tsx","auth/registration/Registration.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","common/c4-SuperEditableSpan/SuperEditableSpan.tsx","common/c5-SuperSelect/SuperSelect.tsx","common/c6-SuperRadio/SuperRadio.tsx","common/c7-SuperRange/SuperRange.tsx","common/c8-SuperDoubleRange/SuperDoubleRange.tsx","pages/PreJunior.tsx","pages/Error404.tsx","profile/Profile.tsx","App.tsx","reportWebVitals.ts","bll/reducers/profile-reducer.ts","bll/reducers/auth-reducer.ts","bll/store/store.ts","index.tsx"],"names":["module","exports","Login","RecoveryPassword","NewPassword","Registration","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","color","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","spanx","SuperSelect","options","onChangeOption","mappedOptions","map","o","i","SuperRadio","name","onChangeCallback","SuperRange","onChangeRange","finalRangeClassName","range","SuperDoubleRange","PreJunior","arr","setChecked","EditableSpan","setEditableSpan","setvalue","value1","setValue1","value2","onClick","alert","undefined","Error404","Profile","App","path","render","exact","from","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isLoggedIn","reducers","combineReducers","profile","state","action","auth","store","createStore","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.325b26ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__WuyFe\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1wekg\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanx\":\"SuperEditableSpan_spanx__1NcIL\",\"superInput\":\"SuperEditableSpan_superInput__1kjns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__3iIEI\"};","import React from 'react'\n\nexport const Login = () => {\n\n\n    return<>\n        <div> login page</div>\n        </>\n}\n\n\n","import React from 'react'\n\nexport const RecoveryPassword = () => {\n\n    return<>\n        <div> Recovery Password</div>\n    </>\n\n}","import React from 'react'\n\nexport const NewPassword = () => {\n\n    return<>\n        <div> new Password</div>\n    </>\n\n}","import React from 'react'\n\nexport const Registration = () => {\n\n    return<>\n        <div> Registration page</div>\n    </>\n    \n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${s.errorInput}` : s.superInput; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,color,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.default: s.red } ${className}`;\n\n    return (\n       /* <Button variant={\"outlined\"} {...restProps}/>*/\n\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n\n onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n\n\n\n            // если есть пропс onChange\n\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\n/*import SuperInputText from \"../../../h4/common/c1-SuperInputText/SuperInputText\";*/\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\nimport s from \"./SuperEditableSpan.module.css\"\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\n\n    const onEnterCallback = () => {\n         setEditMode(false); // выключить editMode при нажатии Enter\n\n        onEnter && onEnter();\n    };\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n         setEditMode( false); // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e);\n    };\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n         setEditMode( true ); // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e);\n    };\n\n    const spanClassName = `${s.spanx} ${className}`;\n\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    );\n}\n\nexport default SuperEditableSpan;\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions = options && options.map((o, i) => <option  key={i}>{o}</option>)\n  //  const mappedOptions = options && options.map((o, i) => <option  key={i}>{o}</option>)\n\n\n    // map options with key\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n        // onChange, onChangeOption\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    );\n}\n\nexport default SuperSelect;\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\n\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions = options ? options.map((o, i) => (\n\n\n        <label key={name + \"-\" + i}>\n            <input\n\n                type={\"radio\"}\n                name={name}\n                value={o}\n                checked={value === o}\n                onChange={onChangeCallback}\n                // name, checked, value, onChange\n            />\n            {o}\n        </label>\n    )) : [];\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    );\n}\n\nexport default SuperRadio;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperRange.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeRange?: (value: number) => void\n};\n\nconst SuperRange: React.FC<SuperRangePropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeRange,\n        className,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e); // сохраняем старую функциональность\n\n        onChangeRange && onChangeRange(+e.currentTarget.value);\n    }\n\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\n\n    return (\n        <>\n            <input\n                type={\"range\"}\n                onChange={onChangeCallback}\n                className={finalRangeClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n        </>\n    );\n}\n\nexport default SuperRange;\n","import React from \"react\";\n\ntype SuperDoubleRangePropsType = {\n    onChangeRange?: (value: [number, number]) => void\n    value?: [number, number]\n    // min, max, step, disable, ...\n}\n\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\n    {\n        onChangeRange, value,\n        // min, max, step, disable, ...\n    }\n) => {\n    // сделать самому, можно подключать библиотеки\n\n    return (\n        <>\n            DoubleRange\n        </>\n    );\n}\n\nexport default SuperDoubleRange;\n","import React, {useState} from \"react\";\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\nimport SuperEditableSpan from \"../common/c4-SuperEditableSpan/SuperEditableSpan\";\nimport SuperSelect from \"../common/c5-SuperSelect/SuperSelect\";\nimport SuperRadio from \"../common/c6-SuperRadio/SuperRadio\";\nimport SuperRange from \"../common/c7-SuperRange/SuperRange\";\nimport SuperDoubleRange from \"../common/c8-SuperDoubleRange/SuperDoubleRange\";\n\n\nfunction PreJunior() {\n    let arr = ['1','2','3']\n    const [checked, setChecked] = useState(false)\n    const [EditableSpan, setEditableSpan] = useState('false')\n    const [value, setvalue] = useState(arr[0])\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(100)\n\n    return (\n        <div>\n            <div><SuperInputText/></div>\n            <div><SuperButton onClick={() => alert('hi')}>delite</SuperButton></div>\n            <div><SuperCheckbox checked={checked} onChangeChecked={setChecked}>{'sdcsdd'}</SuperCheckbox></div>\n            <div><SuperEditableSpan value={EditableSpan} onChangeText={setEditableSpan} spanProps={{children: checked ? undefined : \"enter text...\"}} /></div>\n            <div><SuperSelect options={arr} value={value}onChangeOption={setvalue} /></div>\n            <div><SuperRadio name={\"radio\"}\n                             options={arr}\n                             value={value}\n                             onChangeOption={setvalue}\n                             onChange={(e)=>setvalue(e.currentTarget.value)}/></div>\n            <div><SuperRange value={value1}\n                             onChangeRange={setValue1}/></div>\n            <div><SuperDoubleRange value={[value1, value2]}/></div>\n        </div>\n\n\n    );\n}\n\nexport default PreJunior;\n\n","import React from \"react\";\n\n\n\nexport function Error404() {\n    return (\n        <div>\n            <div>Page not found!</div>\n\n        </div>\n    );\n}\n\n","import React from 'react'\n\nexport const Profile = () => {\n\n\n    return<>\n        <div> Profile page</div>\n    </>\n}","import React from 'react';\nimport {Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport {Login} from \"./auth/login/Login\";\nimport {RecoveryPassword} from \"./auth/recovery-password /RecoveryPassword\";\nimport {NewPassword} from \"./auth/recovery-password /NewPassword\";\nimport {Registration} from \"./auth/registration/Registration\";\nimport PreJunior from \"./pages/PreJunior\";\nimport {Error404} from \"./pages/Error404\";\nimport {Profile} from \"./profile/Profile\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Switch>\n\n                <Route path={'/login'} render={() => <Login/>}/>\n                <Route path={'/passwordrec'} render={() => <RecoveryPassword/>}/>\n                <Route path={'/newpassword'} render={() => <NewPassword/>}/>\n                <Route path={'/Registration'} render={() => <Registration/>}/>\n                <Route path={'/PreJunior'} render={() => <PreJunior/>}/>\n                <Route exact path={'/'} render={() => <Profile/>}/>\n                <Route path={'/404'} render={() => <Error404/>}/>\n                <Redirect from={'*'} to={'/404'}/>\n            </Switch>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\n\nconst initialState = {\n\n}\ntype InitialStateType = typeof initialState\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n// actions\nexport const AC = () => ({type: '---'} as const)\n\n// thunks\nexport const TC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n    }\n\n// types\ntype ActionsType = ReturnType<typeof AC>\n","import { Dispatch } from 'redux'\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n","import {combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"../reducers/profile-reducer\";\nimport {authReducer} from \"../reducers/auth-reducer\";\n\n\nconst reducers = combineReducers({\n    profile: profileReducer,\n    auth: authReducer\n});\n\nconst store = createStore(reducers);\nexport default store\n\nexport type AppStoreType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store; // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}