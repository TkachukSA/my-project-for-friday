{"version":3,"sources":["auth/registration/Registration.module.css","common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","header/Header.module.css","auth/login/Login.module.css","common/c1-LoadingBar/Loading.module.css","common/c4-SuperEditableSpan/SuperEditableSpan.module.css","common/c7-SuperRange/SuperRange.module.css","api/LoginApi.ts","bll/reducers/profile-reducer.ts","bll/reducers/appReducer.ts","bll/reducers/Login-Reducer.ts","auth/login/Login.tsx","api/api.ts","bll/reducers/registration-reducer.ts","auth/registration/Registration.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","common/c4-SuperEditableSpan/SuperEditableSpan.tsx","common/c5-SuperSelect/SuperSelect.tsx","common/c6-SuperRadio/SuperRadio.tsx","common/c7-SuperRange/SuperRange.tsx","common/c8-SuperDoubleRange/SuperDoubleRange.tsx","pages/PreJunior.tsx","pages/Error404.tsx","profile/Profile.tsx","header/Header.tsx","api/recoveryApi.ts","auth/recovery-password/RecoveryReducer.ts","auth/recovery-password/RecoveryPassword.tsx","auth/recovery-password/NewPassword.tsx","App.tsx","reportWebVitals.ts","bll/reducers/auth-reducer.ts","bll/store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","initialState","status","error","initialized","setErrorAC","type","setApiStatusAC","isLoginIn","logInAC","value","Login","dispatch","useDispatch","isLoggedIn","useSelector","state","logIn","errorMessage","app","loadingStatus","formik","useFormik","validate","values","errors","email","test","password","length","initialValues","rememberMe","onSubmit","a","res","user","console","log","response","to","className","l","loader","handleSubmit","s","wrapper","getFieldProps","placeholder","onBlur","handleBlur","touched","style","color","checked","redirect","Registration","registration","confirmedPassword","then","catch","resetForm","input","btn","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","SuperEditableSpan","autoFocus","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","spanx","SuperSelect","options","onChangeOption","mappedOptions","map","o","i","SuperRadio","name","onChangeCallback","SuperRange","onChangeRange","finalRangeClassName","range","SuperDoubleRange","PreJunior","arr","setChecked","EditableSpan","setEditableSpan","setvalue","value1","setValue1","value2","onClick","alert","undefined","Error404","Profile","userProfile","profile","PATH","Header","header","nav","recoveryAPI","from","message","token","resetPasswordToken","isDone","messangeRecInfo","statusCompletedAC","recoveryStatusAC","setAppErrorAC","RecoveryPassword","recovery","recoveryStatus","info","err","finally","NewPassword","useParams","tokenValue","secondPassword","newPasswordTC","App","path","render","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","stateCopy","auth","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d4a9d4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Registration_wrapper__1ylfG\",\"btn\":\"Registration_btn__2WfZB\",\"input\":\"Registration_input__3hmKj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__WuyFe\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1wekg\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1KUp7\",\"nav\":\"Header_nav__ud3dh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__ltQkD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1Xv9a\",\"load6\":\"Loading_load6__10Olr\",\"round\":\"Loading_round__5WduW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanx\":\"SuperEditableSpan_spanx__1NcIL\",\"superInput\":\"SuperEditableSpan_superInput__1kjns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__3iIEI\"};","import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\nexport type UserType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number;\n\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean;\n    rememberMe: boolean;\n};\n\nexport type ResponseDataType = UserType & LoginParamsType\n\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n}\n\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseDataType>('auth/login', data)\n    },\n    me() {\n        return instance.post('auth/me', {})// проверка залогинен или нет\n    },\n    logout() {\n        return instance.delete('auth/me', {})// разлогинивание\n    },\n    ping() {\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {ResponseDataType} from \"../../api/LoginApi\";\n\n\nexport type UserType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\n    rememberMe: boolean;\n\n    error?: string;\n}\n\n\n\nconst initialState = {}\ntype InitialStateType = typeof initialState\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"SET_USER\": {\n            let stateCopy = {...state}\n            stateCopy = {...stateCopy, user: action.user}\n            return {...stateCopy}\n        }\n        default:\n            return state\n    }\n}\n// actions\nexport const AC = () => ({type: '---'} as const)\nexport const setUserAc = (user:UserType) => ({type: \"SET_USER\", user} as const)\n\n\n// thunks\nexport const TC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n}\n\n// types\ntype ActionsType = ReturnType<typeof AC> | ReturnType<typeof setUserAc>\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/LoginApi\";\nimport {logInAC} from \"./Login-Reducer\";\n\ntype ActionsType =\n    | errorStatusAcType\n    | SetApiStatusACType\n    | setApiInitializedACType\n\nexport type InitialStateType = {\n    status: appStatusType,\n    error: string | null,\n    initialized: boolean\n}\n\nexport type appStatusType = 'failed' | 'succeeded' | 'idle' | 'loading'\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    initialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SETT-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-INITIALIZED':\n            return {...state, initialized: action.initialized}\n        default:\n            return {...state}\n    }\n\n}\n\nexport const setErrorAC = (error: null | string) => {\n    return {\n        type: 'APP/SETT-ERROR',\n        error\n    } as const\n}\ntype errorStatusAcType = ReturnType<typeof setErrorAC>\n\nexport const setApiStatusAC = (status: appStatusType) => {\n    return {\n        type: 'APP/SET-STATUS',\n        status\n    } as const\n}\ntype SetApiStatusACType = ReturnType<typeof setApiStatusAC>\n\n\nexport const setAppInitializedAC = (initialized: boolean) => {\n    return {\n        type: 'APP/SET-INITIALIZED',\n        initialized\n    } as const\n}\ntype setApiInitializedACType = ReturnType<typeof setAppInitializedAC>\n\nexport const initializeTC = () => async (dispatch: Dispatch) => {\n    try {\n\n        let res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(logInAC(true))\n\n        } else {\n\n        }\n        dispatch(setAppInitializedAC(true))\n    } catch (error) {\n\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {authAPI, LoginParamsType} from \"../../api/LoginApi\";\nimport {setUserAc} from \"./profile-reducer\";\nimport {setApiStatusAC, setErrorAC} from \"./appReducer\";\n\n\ntype ActionsType =\n    |SetApiStatusACType\n\nexport type LoginInitialStateType = {\n    isLoginIn: boolean\n}\n\n\nconst initialState: LoginInitialStateType = {isLoginIn: false}\n\nexport const loginReducer = (state: LoginInitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'LogIn':\n            return {...state, isLoginIn: action.value}\n        case 'LogOut':\n            return {...state, isLoginIn: action.value}\n\n        default:\n            return state\n    }\n}\n\n\nexport const logInTC = (data: LoginParamsType) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setApiStatusAC('loading'))\n        let res = await authAPI.login(data)\n        if (res.status === 200) {\n            dispatch(logInAC(true))\n            dispatch(setUserAc(res.data))\n            dispatch(setApiStatusAC('succeeded'))\n        } else {\n            dispatch(logInAC(false))\n            dispatch(setErrorAC('Unknown Error'))\n            dispatch(setApiStatusAC('failed'))\n        }\n\n\n    } catch (error) {\n        console.log(error)\n        dispatch(setErrorAC(error.response.data.error))\n        dispatch(setApiStatusAC('failed'))\n    }\n}\n\nexport const logOutTC = () => async (dispatch: Dispatch) => {\n    dispatch(setApiStatusAC('loading'))\n    try {\n        let res = await authAPI.logout()\n        if (res.status === 200){\n            dispatch(logInAC(false))\n            dispatch(setApiStatusAC('succeeded'))\n        }\n        else {\n            dispatch(setErrorAC('Unknown Error'))\n            dispatch(setApiStatusAC('failed'))\n        }\n    } catch (error) {\n        dispatch(setErrorAC(error.response.data.error))\n        dispatch(setApiStatusAC('failed'))\n    }\n}\n\n\nexport const logInAC = (value: boolean) => {\n    return {\n        type: \"LogIn\",\n        value\n    } as const\n}\nexport const logOutAC = (value: boolean) => {\n    return {\n        type: \"LogOut\",\n        value\n    } as const\n}\n\ntype SetApiStatusACType = ReturnType<typeof logInAC> | ReturnType<typeof logOutAC>\n\n\n/*\n\n\n    email: \"nya-admin@nya.nya\"\n    password: \"1qazxcvBG\"\n\t*/\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {Redirect} from \"react-router-dom\";\nimport {logInTC} from '../../bll/reducers/Login-Reducer';\nimport {useFormik} from 'formik';\nimport s from './Login.module.css'\nimport l from   '../../common/c1-LoadingBar/Loading.module.css'\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.logIn.isLoginIn)\n    const errorMessage = useSelector<AppStoreType, string | null>(state => state.app.error)\n    const loadingStatus = useSelector<AppStoreType, string | null>(state => state.app.status)\n\n\n    const formik = useFormik({\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password.length) {\n                errors.password = \"Enter password\"\n            }\n\n            return errors;\n        },\n        initialValues: {\n            email: 'nya-admin@nya.nya',\n            password: '1qazxcvBG',\n            rememberMe: false\n        }, onSubmit: values => {\n            dispatch(logInTC(values))\n        },\n\n    })\n    if (isLoggedIn) {\n\n        return <Redirect to={'/'}/>\n    }\n\n    if(loadingStatus==='loading'){\n        return <div className={l.loader}>Loading...</div>\n    }\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n\n            <div className={s.wrapper}>\n                <input type={\"text\"}  {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n\n                <input type={\"password\"}\n                       placeholder={\"Password\"} {...formik.getFieldProps(\"password\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.password && formik.errors.password\n                    ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\n                    : null}\n\n                <div>\n                    <input type=\"checkbox\"\n                           checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}/>\n\n                    <span>Remember me</span>\n\n                </div>\n                <button type={'submit'}>Login</button>\n            </div>\n            <div>{errorMessage && errorMessage}</div>\n        </form>\n\n    )\n}\n\n\n","import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\n\nexport const authAPI = {\n    login() {\n\n    },\n    me() {\n\n    },\n    logout() {\n\n    },\n    registration(data: dataNewUserType) {\n        return instance.post<ResponseRegistrationType>('/auth/register', data)\n    }\n}\ntype ResponseRegistrationType = {\n    addedUser: {},\n    error?: string,\n}\n\n\nexport type dataNewUserType = {\n    email: string,\n    password: string\n}","import {Dispatch} from 'redux'\nimport {authAPI, dataNewUserType} from \"../../api/api\";\n\n\nexport type RegistrationStateType = {\n    error: string,\n    redirect: boolean\n}\n\nconst initialState: RegistrationStateType = {\n    error: \"\",\n    redirect: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): RegistrationStateType => {\n    switch (action.type) {\n        case 'registration/ERROR':\n            return {\n                ...state, error: action.error\n            }\n        case 'registration/SET-REDIRECT':\n            return {\n                ...state, redirect: action.redirect\n            }\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setErrorAC = (error: string) =>\n    ({type: 'registration/ERROR', error} as const)\nexport const setRedirectAC = (redirect: boolean) =>\n    ({type: 'registration/SET-REDIRECT', redirect} as const)\n\n\n// thunks\nexport const registrationTC = (data: dataNewUserType) => (dispatch: Dispatch<ActionsType>) => {\n\n    authAPI.registration(data)\n        .then((res) => {\n            if (!res.data.error) {\n                console.log(\"registration done\")\n                dispatch(setRedirectAC(true))\n            } else {\n                console.log(res.data.error)\n            }\n        })\n        .catch((error) => {\n            dispatch(setErrorAC(error))\n        })\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setErrorAC | typeof setRedirectAC>\n","import React from 'react'\nimport s from \"./Registration.module.css\"\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RegistrationStateType, registrationTC} from '../../bll/reducers/registration-reducer';\nimport {AppStoreType} from '../../bll/store/store';\nimport {Redirect} from 'react-router-dom';\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    confirmedPassword?: string\n}\n\n\nexport const Registration = () => {\n    const state = useSelector<AppStoreType, RegistrationStateType>(state => state.registration)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmedPassword: ''\n        }, validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (values.password.length <= 8) {\n                errors.password = \"password must be 8 characters long\"\n            }\n            if (values.password !== values.confirmedPassword) {\n                errors.confirmedPassword = \"Password mismatch\"\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            dispatch(registrationTC({email: values.email, password: values.password}))\n            formik.resetForm()\n        },\n    })\n    if (state.redirect) {\n        return (<Redirect to={\"/login\"}/>)\n    }\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div className={s.wrapper}>\n                <input className={s.input} type={\"text\"} {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n\n                <input className={s.input} type={\"password\"}\n                       placeholder={\"Password\"} {...formik.getFieldProps(\"password\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.password && formik.errors.password\n                    ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\n                    : null}\n\n                <input className={s.input} type={\"password\"} placeholder={\" Confirm password\"}\n                       {...formik.getFieldProps(\"confirmedPassword\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.confirmedPassword && formik.errors.confirmedPassword\n                    ? <div style={{color: \"red\"}}>{formik.errors.confirmedPassword}</div>\n                    : null}\n\n                <button type={\"submit\"} className={s.btn}>Sign up</button>\n\n                <div>{state.error}</div>\n            </div>\n        </form>\n    )\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\n const SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${s.errorInput}` : s.superInput; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,color,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.default: s.red } ${className}`;\n\n    return (\n       /* <Button variant={\"outlined\"} {...restProps}/>*/\n\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n\n onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n\n\n\n            // если есть пропс onChange\n\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\n/*import SuperInputText from \"../../../h4/common/c1-SuperInputText/SuperInputText\";*/\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\nimport s from \"./SuperEditableSpan.module.css\"\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\n\n    const onEnterCallback = () => {\n         setEditMode(false); // выключить editMode при нажатии Enter\n\n        onEnter && onEnter();\n    };\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n         setEditMode( false); // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e);\n    };\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n         setEditMode( true ); // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e);\n    };\n\n    const spanClassName = `${s.spanx} ${className}`;\n\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    );\n}\n\nexport default SuperEditableSpan;\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions = options && options.map((o, i) => <option  key={i}>{o}</option>)\n  //  const mappedOptions = options && options.map((o, i) => <option  key={i}>{o}</option>)\n\n\n    // map options with key\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n        // onChange, onChangeOption\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    );\n}\n\nexport default SuperSelect;\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\n\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions = options ? options.map((o, i) => (\n\n\n        <label key={name + \"-\" + i}>\n            <input\n\n                type={\"radio\"}\n                name={name}\n                value={o}\n                checked={value === o}\n                onChange={onChangeCallback}\n                // name, checked, value, onChange\n            />\n            {o}\n        </label>\n    )) : [];\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    );\n}\n\nexport default SuperRadio;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperRange.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeRange?: (value: number) => void\n};\n\nconst SuperRange: React.FC<SuperRangePropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeRange,\n        className,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e); // сохраняем старую функциональность\n\n        onChangeRange && onChangeRange(+e.currentTarget.value);\n    }\n\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\n\n    return (\n        <>\n            <input\n                type={\"range\"}\n                onChange={onChangeCallback}\n                className={finalRangeClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n        </>\n    );\n}\n\nexport default SuperRange;\n","import React from \"react\";\n\ntype SuperDoubleRangePropsType = {\n    onChangeRange?: (value: [number, number]) => void\n    value?: [number, number]\n    // min, max, step, disable, ...\n}\n\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\n    {\n        onChangeRange, value,\n        // min, max, step, disable, ...\n    }\n) => {\n    // сделать самому, можно подключать библиотеки\n\n    return (\n        <>\n            DoubleRange\n        </>\n    );\n}\n\nexport default SuperDoubleRange;\n","import React, {useState} from \"react\";\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\nimport SuperEditableSpan from \"../common/c4-SuperEditableSpan/SuperEditableSpan\";\nimport SuperSelect from \"../common/c5-SuperSelect/SuperSelect\";\nimport SuperRadio from \"../common/c6-SuperRadio/SuperRadio\";\nimport SuperRange from \"../common/c7-SuperRange/SuperRange\";\nimport SuperDoubleRange from \"../common/c8-SuperDoubleRange/SuperDoubleRange\";\n\n\nfunction PreJunior() {\n    let arr = ['1', '2', '3']\n    const [checked, setChecked] = useState(false)\n    const [EditableSpan, setEditableSpan] = useState('false')\n    const [value, setvalue] = useState(arr[0])\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(100)\n\n    return (\n        <div>\n            <div><SuperInputText/></div>\n            <div><SuperButton onClick={() => alert('hi')}>delite</SuperButton></div>\n            <div><SuperCheckbox checked={checked} onChangeChecked={setChecked}>{'sdcsdd'}</SuperCheckbox></div>\n            <div><SuperEditableSpan value={EditableSpan} onChangeText={setEditableSpan}\n                                    spanProps={{children: checked ? undefined : \"enter text...\"}}/></div>\n            <div><SuperSelect options={arr} value={value} onChangeOption={setvalue}/></div>\n            <div><SuperRadio name={\"radio\"}\n                             options={arr}\n                             value={value}\n                             onChangeOption={setvalue}\n                             onChange={(e) => setvalue(e.currentTarget.value)}/></div>\n            <div><SuperRange value={value1}\n                             onChangeRange={setValue1}/></div>\n            <div><SuperDoubleRange value={[value1, value2]}/></div>\n        </div>\n\n\n    );\n}\n\nexport default PreJunior;\n\n","import React from \"react\";\n\n\n\nexport function Error404() {\n    return (\n        <div>\n            <div>Page not found!</div>\n        </div>\n    );\n}\n\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logOutTC} from \"../bll/reducers/Login-Reducer\";\nimport {AppStoreType} from \"../bll/store/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Profile = () => {\n    const dispatch = useDispatch()\n    const userProfile = useSelector<AppStoreType>(state => state.profile)\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.logIn.isLoginIn)\n    const errorMessage = useSelector<AppStoreType, string | null>(state => state.app.error)\n\n    if(!isLoggedIn){\n       return <Redirect to={'/login'}/>\n    }\n\n    const logOut = () => {\n        dispatch(logOutTC())\n    }\nconsole.log(userProfile)\n\n    return (\n        <div>\n            <div> Profile page</div>\n            {/*<img src=\"userProfile.avatar\" alt=\"\"/>*/}\n            <button onClick={logOut}>LogOut</button>\n            <div>{errorMessage && errorMessage}</div>\n        </div>\n    )\n}","import React from 'react';\nimport {NavLink, Switch} from 'react-router-dom';\nimport style from './Header.module.css'\n\nexport const PATH = {\n    loginPage: \"/login\",\n    RecoveryPasswordPage: \"/recoverypassword\",\n    NewPasswordPage: \"/newpassword/:token?\",\n    RegistrationPage: \"/registration\",\n    PreJuniorPage: \"/prejunior\",\n    ErrorPage: \"/404\",\n    Main: \"/\",\n    Redirect: \"*\"\n\n    // add paths\n}\n\nfunction Header() {\n\n    return (\n        <div className={style.header}>\n            <Switch>\n                <div className={style.nav}>\n                    <ul>\n                        <li><NavLink to={PATH.loginPage}>Login</NavLink></li>\n                        <li><NavLink to={PATH.RecoveryPasswordPage}>Reacovery Password</NavLink></li>\n                        <li><NavLink to={PATH.NewPasswordPage}>New Password</NavLink></li>\n                        <li><NavLink to={PATH.RegistrationPage}>Registration</NavLink></li>\n                        <li><NavLink to={PATH.PreJuniorPage}>PreJunior</NavLink></li>\n                        <li><NavLink to={PATH.Main}>Profile</NavLink></li>\n                        <li><NavLink to={PATH.ErrorPage}>Error Page</NavLink></li>\n                    </ul>\n                </div>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Header;\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    //baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\n// export type APIResponseType<T = {}> = {\n//     data: T\n//     statusText: string\n//     status: number\n// }\n// export type RecoveryPasswordType = {\n//     answer: boolean\n//     html: boolean\n//     info: string\n//     success: boolean\n//\n// }\ntype RecoveryResponseType = {\n    answer: boolean\n    html: boolean\n    success: boolean\n    info: any\n    status: number\n    statusText: string\n    error?: string\n}\nexport type NewPasswordRequestType = {\n    password: string\n    resetPasswordToken: string\n    info: any\n    status: number\n    statusText: string\n}\n\nexport const recoveryAPI = {\n    forgotEmail(email: string) {\n        return instance.post<RecoveryResponseType>('auth/forgot', {\n            email: email,\n            from: \"test-front-admin <crafta.net@gmail.com>\",\n            message: `<div style=\"background-color: darkcyan; padding: 15px\">\n                            password recovery link: \n                     <a href='http://localhost:3000/?#/newpassword/$token$'>Click</a>\n                     </div>`\n        })\n    },\n    resetPassword(password: string, token: string | undefined) {\n        return instance.post<NewPasswordRequestType>('auth/set-new-password', {\n            password,\n            resetPasswordToken: token\n        })\n    },\n}","import {Dispatch} from 'redux'\nimport {recoveryAPI} from \"../../api/recoveryApi\";\n\n\nexport type isDoneType = 'true' | 'false' | 'inProgress'\nconst initialState = {\n    isDone: 'false' as isDoneType,\n    messangeRecInfo: '',\n    error: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const RecoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'STATUS_COMPLETED': {\n            return {...state, isDone: action.value}\n        }\n        case \"RECOVERY_INFO\": {\n            return {...state, messangeRecInfo: action.value}\n        }\n        case \"SET-ERROR\": {\n            return {...state, error: action.error}\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const statusCompletedAC = (value: isDoneType) => ({type: 'STATUS_COMPLETED', value} as const)\nexport const recoveryStatusAC = (value: string) => ({type: 'RECOVERY_INFO', value} as const)\nexport const setAppErrorAC = (error: string) => ({type: 'SET-ERROR', error} as const)\n// пароль измен\n    //export const newPasswordAC = (password: string, token: string | undefined) => ({type: 'CHANGE_PASSWORD', password, token} as const)\n\n// thunks\nexport const forgotTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(recoveryStatusAC('loading'))\n    recoveryAPI.forgotEmail(email)\n        .then((res) => {\n            if (res.status === 200) {\n                dispatch(statusCompletedAC('inProgress'))\n                dispatch(recoveryStatusAC(res.data.info))\n            } else {\n                dispatch(statusCompletedAC('false'))\n                dispatch(recoveryStatusAC('unexpected error'))\n            }\n        })\n        .catch((err) => {\n            if (err.response) {\n                dispatch(setAppErrorAC(err.response.data.error))\n            } else {\n                dispatch(setAppErrorAC('dangerous mistake'))\n            }\n        }).finally(() => {\n        dispatch(recoveryStatusAC(''))\n    })\n}\nexport const newPasswordTC = (password: string, token: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(recoveryStatusAC('loading'))\n    recoveryAPI.resetPassword(password, token)\n        .then((res) => {\n            if (res.status === 200) {\n                /*dispatch(newPasswordAC(password, token))*/\n                dispatch(statusCompletedAC(\"true\"))\n                dispatch(recoveryStatusAC(res.data.info))\n\n            } else {\n                dispatch(statusCompletedAC('false'))\n                dispatch(recoveryStatusAC('! error'))\n            }\n\n            console.log(res)\n        })\n        .catch((err) => {\n            if (err.response) {\n                dispatch(setAppErrorAC(err.response.data.error))\n            } else {\n                dispatch(setAppErrorAC('dangerous mistake'))\n            }\n        }).finally(() => {\n        dispatch(recoveryStatusAC(''))\n    })\n}\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof statusCompletedAC>\n    | ReturnType<typeof recoveryStatusAC>\n    | ReturnType<typeof setAppErrorAC>\n\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {forgotTC, isDoneType} from \"./RecoveryReducer\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {Redirect} from 'react-router-dom';\nimport {PATH} from \"../../header/Header\";\nimport {useFormik} from \"formik\";\n\n\nexport const RecoveryPassword = () => {\n\n    // isDone - статус восстоновления пароля\n    // изначально - 'false' (при переходе на страницу recovertPassword)\n    // статус меняйется на - 'inProgress' если пользователь ввел верный email и пришел положительный ответ от сервера\n    // статус меняйется на - 'true'  когда ввели новый пароль и есть актуальный токен\n    const isDone = useSelector<AppStoreType, isDoneType>(state => state.recovery.isDone)\n\n    // показывает 'loading' перед отправкой на сервер, и выдает инфу об статусе запроса с сервера\n    const recoveryStatus = useSelector<AppStoreType, string>(state => state.recovery.messangeRecInfo)\n\n    // обработка ошибок (показывается если что-то пошло не так)\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    const dispatch = useDispatch()\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: ''\n        },\n        validate: (values) => {\n            const errors: { email?: string } = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(forgotTC(values.email))\n            formik.resetForm()\n        },\n    })\n\n    // redirect\n    if (isDone === 'inProgress') {\n        return <Redirect to={PATH.NewPasswordPage}/>\n    }\n    return <>\n\n        <div> Recovery Password</div>\n\n        <div>{recoveryStatus}</div>\n        <form onSubmit={formik.handleSubmit}>\n            <div> please enter your email</div>\n            <div>\n                <input type={\"text\"} {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n            </div>\n            <div>\n                <button type={\"submit\"}>Send</button>\n            </div>\n            <div>{error}</div>\n        </form>\n\n    </>\n\n}\n\n\n","import React from 'react'\nimport {Redirect, useParams} from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isDoneType, newPasswordTC} from \"./RecoveryReducer\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {PATH} from \"../../header/Header\";\nimport {useFormik} from \"formik\";\n\ntype FormikErrorType = {\n    password?: string\n    secondPassword?: string\n}\n\nexport const NewPassword = () => {\n\n    // обработка ошибок (показывается если что-то пошло не так)\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    // смотри описание в RecoveryPassword.tsx\n    const isDone = useSelector<AppStoreType, isDoneType>(state => state.recovery.isDone)\n    // показывает 'loading' перед отправкой на сервер, и выдает инфу об статусе запроса с сервера\n    const recoveryStatus = useSelector<AppStoreType, string>(state => state.recovery.messangeRecInfo)\n\n    const dispatch = useDispatch()\n    // хук достающий из урла токен. добавляется к урлу после перехода по ссылке на эл. почте\n    const {token} = useParams<Record<string, string | undefined>>();\n    const tokenValue = token ? token : ''\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            secondPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.password !== values.secondPassword) {\n                errors.secondPassword = 'password mismatch'\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'enter the passvord length 7';\n            }\n            if (!values.secondPassword) {\n                errors.secondPassword = 'Required';\n            } else if (values.secondPassword.length < 7) {\n                errors.secondPassword = 'enter the passvord length 7';\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            dispatch(newPasswordTC(values.password, tokenValue))\n            formik.resetForm()\n        },\n\n    })\n\n\n    if (isDone === 'true') {\n        return <Redirect to={PATH.loginPage}/>\n    }\n\n    return <>\n        <div> new Password</div>\n        <div>{recoveryStatus}</div>\n        <form onSubmit={formik.handleSubmit}>\n            <div>\n                <div>\n                    <input type={\"text\"}\n                           {...formik.getFieldProps(\"password\")}\n                           placeholder={\"Password\"}\n                           onBlur={formik.handleBlur}/>\n\n                    {formik.touched.password && formik.errors.password ?\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                </div>\n\n                <div>\n                    <input type={\"text\"}\n                           {...formik.getFieldProps(\"secondPassword\")}\n                           placeholder={\"Password\"}\n                           onBlur={formik.handleBlur}/>\n\n                    {formik.touched.secondPassword && formik.errors.secondPassword ?\n                        <div style={{color: \"red\"}}>{formik.errors.secondPassword}</div> : null}\n                </div>\n            </div>\n            <div>\n                <button type={\"submit\"}>Send</button>\n            </div>\n            <div>{error}</div>\n        </form>\n\n    </>\n\n}","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport {Login} from \"./auth/login/Login\";\nimport {Registration} from \"./auth/registration/Registration\";\nimport PreJunior from \"./pages/PreJunior\";\nimport {Error404} from \"./pages/Error404\";\nimport {Profile} from \"./profile/Profile\";\nimport Header, {PATH} from \"./header/Header\";\nimport {RecoveryPassword} from \"./auth/recovery-password/RecoveryPassword\";\nimport {NewPassword} from \"./auth/recovery-password/NewPassword\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Switch>\n                <Route path={PATH.loginPage} render={() => <Login/>}/>\n                <Route path={PATH.RecoveryPasswordPage} render={() => <RecoveryPassword/>}/>\n                <Route path={PATH.NewPasswordPage} render={() => <NewPassword/>}/>\n                <Route path={PATH.RegistrationPage} render={() => <Registration/>}/>\n                <Route path={PATH.PreJuniorPage} render={() => <PreJunior/>}/>\n                <Route exact path={PATH.Main} render={() => <Profile/>}/>\n                <Route path={PATH.ErrorPage} render={() => <Error404/>}/>\n                <Redirect from={PATH.Redirect} to={'/404'}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux'\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n\n\n\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"../reducers/profile-reducer\";\nimport {authReducer} from \"../reducers/auth-reducer\";\nimport {RecoveryReducer} from \"../../auth/recovery-password/RecoveryReducer\";\nimport {registrationReducer} from \"../reducers/registration-reducer\";\nimport {loginReducer} from \"../reducers/Login-Reducer\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"../reducers/appReducer\";\n\n\nconst reducers = combineReducers({\n    profile: profileReducer,\n    auth: authReducer,\n    registration: registrationReducer,\n    recovery: RecoveryReducer,\n    logIn: loginReducer,\n    app:appReducer\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store\n\nexport type AppStoreType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store; // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}