{"version":3,"sources":["api/LoginApi.ts","bll/reducers/profile-reducer.ts","bll/reducers/appReducer.ts","bll/reducers/Login-Reducer.ts","auth/login/Login.tsx","api/api.ts","bll/reducers/registration-reducer.ts","auth/registration/Registration.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","common/c4-SuperEditableSpan/SuperEditableSpan.tsx","common/c5-SuperSelect/SuperSelect.tsx","common/c6-SuperRadio/SuperRadio.tsx","common/c7-SuperRange/SuperRange.tsx","common/c8-SuperDoubleRange/SuperDoubleRange.tsx","pages/PreJunior.tsx","pages/Error404.tsx","profile/Profile.tsx","header/Header.tsx","api/recoveryApi.ts","auth/recovery-password/RecoveryReducer.ts","auth/recovery-password/RecoveryPassword.tsx","auth/recovery-password/NewPassword.tsx","pages/Card/dall/cardsApi.ts","pages/Card/bll/PacksReducer.ts","pages/Card/ui/Pagination.tsx","pages/Card/ui/Packs.tsx","pages/Card/ui/Cards.tsx","App.tsx","reportWebVitals.ts","bll/reducers/auth-reducer.ts","bll/store/store.ts","index.tsx","common/c1-LoadingBar/Loading.module.css","auth/registration/Registration.module.css","pages/Card/ui/Pagination.module.css","common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","header/Header.module.css","pages/Card/ui/Packs.module.css","pages/Card/ui/Cards.module.css","auth/login/Login.module.css","common/c4-SuperEditableSpan/SuperEditableSpan.module.css","common/c7-SuperRange/SuperRange.module.css"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","initialState","status","error","initialized","setErrorAC","type","setApiStatusAC","isLoginIn","logInAC","value","Login","dispatch","useDispatch","isLoggedIn","useSelector","state","logIn","errorMessage","app","loadingStatus","formik","useFormik","validate","values","errors","email","test","password","length","initialValues","rememberMe","onSubmit","a","res","user","console","log","response","to","className","l","loader","handleSubmit","s","wrapper","getFieldProps","placeholder","onBlur","handleBlur","touched","style","color","checked","redirect","Registration","registration","confirmedPassword","then","catch","resetForm","input","btn","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","SuperEditableSpan","autoFocus","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","spanx","SuperSelect","options","onChangeOption","mappedOptions","map","o","i","SuperRadio","name","onChangeCallback","SuperRange","onChangeRange","finalRangeClassName","range","SuperDoubleRange","Typography","id","gutterBottom","Slider","valueLabelDisplay","aria-labelledby","PreJunior","arr","setChecked","EditableSpan","setEditableSpan","setvalue","value1","setValue1","value2","onClick","alert","undefined","Error404","Profile","userProfile","profile","PATH","Header","header","nav","recoveryAPI","from","message","token","resetPasswordToken","isDone","messangeRecInfo","statusCompletedAC","recoveryStatusAC","setAppErrorAC","RecoveryPassword","recovery","recoveryStatus","info","err","finally","NewPassword","useParams","tokenValue","secondPassword","newPasswordTC","packsAPI","cardsPack_id","page","pageCount","packName","min","max","get","params","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","currentPage","pageSize","packsTotalCount","isLoading","sort","card","getCardsPacksAC","getCcardPacksCountAC","setCurrentPageAC","setPageSizeAC","size","isLoadingAC","loading","getCardsCC","cards","getPacksTC","getCardsTC","Paginations","findTitle","chengedDoubleRange","onChangeselect","Math","ceil","pages","push","React","setPage","find","setFind","setValue2","paginationContainer","blockFinde","Array","isArray","blockPagination","Pagination","count","event","Number","Packs","packs","useEffect","table","t","user_name","cardsCount","_id","updated","Cards","question","grade","questionImg","App","path","render","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","stateCopy","auth","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a02fdc64.chunk.js","sourcesContent":["import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n  //baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\nexport type UserType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number;\n\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean;\n    rememberMe: boolean;\n};\n\nexport type ResponseDataType = UserType & LoginParamsType\n\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n}\n\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseDataType>('auth/login', data)\n    },\n    me() {\n        return instance.post('auth/me', {})// проверка залогинен или нет\n    },\n    logout() {\n        return instance.delete('auth/me', {})// разлогинивание\n    },\n    ping() {\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {ResponseDataType} from \"../../api/LoginApi\";\n\n\nexport type UserType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\n    rememberMe: boolean;\n\n    error?: string;\n}\n\n\n\nconst initialState = {}\ntype InitialStateType = typeof initialState\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"SET_USER\": {\n            let stateCopy = {...state}\n            stateCopy = {...stateCopy, user: action.user}\n            return {...stateCopy}\n        }\n        default:\n            return state\n    }\n}\n// actions\nexport const AC = () => ({type: '---'} as const)\nexport const setUserAc = (user:UserType) => ({type: \"SET_USER\", user} as const)\n\n\n// thunks\nexport const TC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n}\n\n// types\ntype ActionsType = ReturnType<typeof AC> | ReturnType<typeof setUserAc>\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/LoginApi\";\nimport {logInAC} from \"./Login-Reducer\";\n\ntype ActionsType =\n    | errorStatusAcType\n    | SetApiStatusACType\n    | setApiInitializedACType\n\nexport type InitialStateType = {\n    status: appStatusType,\n    error: string | null,\n    initialized: boolean\n}\n\nexport type appStatusType = 'failed' | 'succeeded' | 'idle' | 'loading'\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    initialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SETT-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-INITIALIZED':\n            return {...state, initialized: action.initialized}\n        default:\n            return {...state}\n    }\n\n}\n\nexport const setErrorAC = (error: null | string) => {\n    return {\n        type: 'APP/SETT-ERROR',\n        error\n    } as const\n}\ntype errorStatusAcType = ReturnType<typeof setErrorAC>\n\nexport const setApiStatusAC = (status: appStatusType) => {\n    return {\n        type: 'APP/SET-STATUS',\n        status\n    } as const\n}\ntype SetApiStatusACType = ReturnType<typeof setApiStatusAC>\n\n\nexport const setAppInitializedAC = (initialized: boolean) => {\n    return {\n        type: 'APP/SET-INITIALIZED',\n        initialized\n    } as const\n}\ntype setApiInitializedACType = ReturnType<typeof setAppInitializedAC>\n\nexport const initializeTC = () => async (dispatch: Dispatch) => {\n    try {\n\n        let res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(logInAC(true))\n\n        } else {\n\n        }\n        dispatch(setAppInitializedAC(true))\n    } catch (error) {\n\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {authAPI, LoginParamsType} from \"../../api/LoginApi\";\nimport {setUserAc} from \"./profile-reducer\";\nimport {setApiStatusAC, setErrorAC} from \"./appReducer\";\n\n\ntype ActionsType =\n    |SetApiStatusACType\n\nexport type LoginInitialStateType = {\n    isLoginIn: boolean\n}\n\n\nconst initialState: LoginInitialStateType = {isLoginIn: false}\n\nexport const loginReducer = (state: LoginInitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'LogIn':\n            return {...state, isLoginIn: action.value}\n        case 'LogOut':\n            return {...state, isLoginIn: action.value}\n\n        default:\n            return state\n    }\n}\n\n\nexport const logInTC = (data: LoginParamsType) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setApiStatusAC('loading'))\n        let res = await authAPI.login(data)\n        if (res.status === 200) {\n            dispatch(logInAC(true))\n            dispatch(setUserAc(res.data))\n            dispatch(setApiStatusAC('succeeded'))\n        } else {\n            dispatch(logInAC(false))\n            dispatch(setErrorAC('Unknown Error'))\n            dispatch(setApiStatusAC('failed'))\n        }\n\n\n    } catch (error) {\n        console.log(error)\n        dispatch(setErrorAC(error.response.data.error))\n        dispatch(setApiStatusAC('failed'))\n    }\n}\n\nexport const logOutTC = () => async (dispatch: Dispatch) => {\n    dispatch(setApiStatusAC('loading'))\n    try {\n        let res = await authAPI.logout()\n        if (res.status === 200){\n            dispatch(logInAC(false))\n            dispatch(setApiStatusAC('succeeded'))\n        }\n        else {\n            dispatch(setErrorAC('Unknown Error'))\n            dispatch(setApiStatusAC('failed'))\n        }\n    } catch (error) {\n        dispatch(setErrorAC(error.response.data.error))\n        dispatch(setApiStatusAC('failed'))\n    }\n}\n\n\nexport const logInAC = (value: boolean) => {\n    return {\n        type: \"LogIn\",\n        value\n    } as const\n}\nexport const logOutAC = (value: boolean) => {\n    return {\n        type: \"LogOut\",\n        value\n    } as const\n}\n\ntype SetApiStatusACType = ReturnType<typeof logInAC> | ReturnType<typeof logOutAC>\n\n\n/*\n\n\n    email: \"nya-admin@nya.nya\"\n    password: \"1qazxcvBG\"\n\t*/\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {Redirect} from \"react-router-dom\";\nimport {logInTC} from '../../bll/reducers/Login-Reducer';\nimport {useFormik} from 'formik';\nimport s from './Login.module.css'\nimport l from   '../../common/c1-LoadingBar/Loading.module.css'\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.logIn.isLoginIn)\n    const errorMessage = useSelector<AppStoreType, string | null>(state => state.app.error)\n    const loadingStatus = useSelector<AppStoreType, string | null>(state => state.app.status)\n\n\n    const formik = useFormik({\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password.length) {\n                errors.password = \"Enter password\"\n            }\n\n            return errors;\n        },\n        initialValues: {\n            email: 'nya-admin@nya.nya',\n            password: '1qazxcvBG',\n            rememberMe: false\n        }, onSubmit: values => {\n            dispatch(logInTC(values))\n        },\n\n    })\n    if (isLoggedIn) {\n\n        return <Redirect to={'/'}/>\n    }\n\n    if(loadingStatus==='loading'){\n        return <div className={l.loader}>Loading...</div>\n    }\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n\n            <div className={s.wrapper}>\n                <input type={\"text\"}  {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n\n                <input type={\"password\"}\n                       placeholder={\"Password\"} {...formik.getFieldProps(\"password\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.password && formik.errors.password\n                    ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\n                    : null}\n\n                <div>\n                    <input type=\"checkbox\"\n                           checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}/>\n\n                    <span>Remember me</span>\n\n                </div>\n                <button type={'submit'}>Login</button>\n            </div>\n            <div>{errorMessage && errorMessage}</div>\n        </form>\n\n    )\n}\n\n\n","import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    /*baseURL: 'http://localhost:7542/2.0/',*/\n    withCredentials: true,\n})\n\n\nexport const authAPI = {\n    login() {\n\n    },\n    me() {\n\n    },\n    logout() {\n\n    },\n    registration(data: dataNewUserType) {\n        return instance.post<ResponseRegistrationType>('/auth/register', data)\n    }\n}\ntype ResponseRegistrationType = {\n    addedUser: {},\n    error?: string,\n}\n\n\nexport type dataNewUserType = {\n    email: string,\n    password: string\n}\n","import {Dispatch} from 'redux'\nimport {authAPI, dataNewUserType} from \"../../api/api\";\n\n\nexport type RegistrationStateType = {\n    error: string,\n    redirect: boolean\n}\n\nconst initialState: RegistrationStateType = {\n    error: \"\",\n    redirect: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): RegistrationStateType => {\n    switch (action.type) {\n        case 'registration/ERROR':\n            return {\n                ...state, error: action.error\n            }\n        case 'registration/SET-REDIRECT':\n            return {\n                ...state, redirect: action.redirect\n            }\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setErrorAC = (error: string) =>\n    ({type: 'registration/ERROR', error} as const)\nexport const setRedirectAC = (redirect: boolean) =>\n    ({type: 'registration/SET-REDIRECT', redirect} as const)\n\n\n// thunks\nexport const registrationTC = (data: dataNewUserType) => (dispatch: Dispatch<ActionsType>) => {\n\n    authAPI.registration(data)\n        .then((res) => {\n            if (!res.data.error) {\n                console.log(\"registration done\")\n                dispatch(setRedirectAC(true))\n            } else {\n                console.log(res.data.error)\n            }\n        })\n        .catch((error) => {\n            dispatch(setErrorAC(error))\n        })\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setErrorAC | typeof setRedirectAC>\n","import React from 'react'\nimport s from \"./Registration.module.css\"\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RegistrationStateType, registrationTC} from '../../bll/reducers/registration-reducer';\nimport {AppStoreType} from '../../bll/store/store';\nimport {Redirect} from 'react-router-dom';\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    confirmedPassword?: string\n}\n\n\nexport const Registration = () => {\n    const state = useSelector<AppStoreType, RegistrationStateType>(state => state.registration)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmedPassword: ''\n        }, validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (values.password.length <= 8) {\n                errors.password = \"password must be 8 characters long\"\n            }\n            if (values.password !== values.confirmedPassword) {\n                errors.confirmedPassword = \"Password mismatch\"\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            dispatch(registrationTC({email: values.email, password: values.password}))\n            formik.resetForm()\n        },\n    })\n    if (state.redirect) {\n        return (<Redirect to={\"/login\"}/>)\n    }\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div className={s.wrapper}>\n                <input className={s.input} type={\"text\"} {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n\n                <input className={s.input} type={\"password\"}\n                       placeholder={\"Password\"} {...formik.getFieldProps(\"password\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.password && formik.errors.password\n                    ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\n                    : null}\n\n                <input className={s.input} type={\"password\"} placeholder={\" Confirm password\"}\n                       {...formik.getFieldProps(\"confirmedPassword\")} onBlur={formik.handleBlur}/>\n\n                {formik.touched.confirmedPassword && formik.errors.confirmedPassword\n                    ? <div style={{color: \"red\"}}>{formik.errors.confirmedPassword}</div>\n                    : null}\n\n                <button type={\"submit\"} className={s.btn}>Sign up</button>\n\n                <div>{state.error}</div>\n            </div>\n        </form>\n    )\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\n const SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${s.errorInput}` : s.superInput; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,color,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.default: s.red } ${className}`;\n\n    return (\n       /* <Button variant={\"outlined\"} {...restProps}/>*/\n\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n\n onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n\n\n\n            // если есть пропс onChange\n\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\n/*import SuperInputText from \"../../../h4/common/c1-SuperInputText/SuperInputText\";*/\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\nimport s from \"./SuperEditableSpan.module.css\"\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\n\n    const onEnterCallback = () => {\n         setEditMode(false); // выключить editMode при нажатии Enter\n\n        onEnter && onEnter();\n    };\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n         setEditMode( false); // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e);\n    };\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n         setEditMode( true ); // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e);\n    };\n\n    const spanClassName = `${s.spanx} ${className}`;\n\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    );\n}\n\nexport default SuperEditableSpan;\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: string[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions = options && options.map((o, i) => <option  key={i}>{o}</option>)\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    );\n}\n\nexport default SuperSelect;\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\n\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions = options ? options.map((o, i) => (\n\n\n        <label key={name + \"-\" + i}>\n            <input\n\n                type={\"radio\"}\n                name={name}\n                value={o}\n                checked={value === o}\n                onChange={onChangeCallback}\n                // name, checked, value, onChange\n            />\n            {o}\n        </label>\n    )) : [];\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    );\n}\n\nexport default SuperRadio;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperRange.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeRange?: (value: number) => void\n};\n\nconst SuperRange: React.FC<SuperRangePropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeRange,\n        className,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e); // сохраняем старую функциональность\n\n        onChangeRange && onChangeRange(+e.currentTarget.value);\n    }\n\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\n\n    return (\n        <>\n            <input\n                type={\"range\"}\n                onChange={onChangeCallback}\n                className={finalRangeClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n        </>\n    );\n}\n\nexport default SuperRange;\n","import React, {ChangeEvent} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport Slider from \"@material-ui/core/Slider\";\n\ntype SuperDoubleRangePropsType = {\n    onChangeRange?: (value: [number, number]) => void\n    value?: [number, number]\n    // min, max, step, disable, ...\n}\n\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\n    {\n        onChangeRange, value,\n        // min, max, step, disable, ...\n    }\n) => {\n    // сделать самому, можно подключать библиотеки\n\n    const onChangeCallback = (e: any, value: (number[] | number)) => {\n        onChangeRange && onChangeRange( value as [number, number]);\n    }\n    return (\n        <>\n\n            <Typography id=\"range-slider\" gutterBottom>\n\n            </Typography>\n            <Slider\n                value={value}\n                onChange={onChangeCallback}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n\n            />\n        </>\n    );\n}\n\nexport default SuperDoubleRange;\n","import React, {useState} from \"react\";\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\nimport SuperEditableSpan from \"../common/c4-SuperEditableSpan/SuperEditableSpan\";\nimport SuperSelect from \"../common/c5-SuperSelect/SuperSelect\";\nimport SuperRadio from \"../common/c6-SuperRadio/SuperRadio\";\nimport SuperRange from \"../common/c7-SuperRange/SuperRange\";\nimport SuperDoubleRange from \"../common/c8-SuperDoubleRange/SuperDoubleRange\";\n\n\nfunction PreJunior() {\n    let arr = ['1', '2', '3']\n    const [checked, setChecked] = useState(false)\n    const [EditableSpan, setEditableSpan] = useState('false')\n    const [value, setvalue] = useState(arr[0])\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(100)\n\n    return (\n        <div>\n            <div><SuperInputText/></div>\n            <div><SuperButton onClick={() => alert('hi')}>delite</SuperButton></div>\n            <div><SuperCheckbox checked={checked} onChangeChecked={setChecked}>{'sdcsdd'}</SuperCheckbox></div>\n            <div><SuperEditableSpan value={EditableSpan} onChangeText={setEditableSpan}\n                                    spanProps={{children: checked ? undefined : \"enter text...\"}}/></div>\n            <div><SuperSelect options={arr} value={value} onChangeOption={setvalue}/></div>\n            <div><SuperRadio name={\"radio\"}\n                             options={arr}\n                             value={value}\n                             onChangeOption={setvalue}\n                             onChange={(e) => setvalue(e.currentTarget.value)}/></div>\n            <div><SuperRange value={value1}\n                             onChangeRange={setValue1}/></div>\n            <div><SuperDoubleRange value={[value1, value2]}/></div>\n        </div>\n\n\n    );\n}\n\nexport default PreJunior;\n\n","import React from \"react\";\n\n\n\nexport function Error404() {\n    return (\n        <div>\n            <div>Page not found!</div>\n        </div>\n    );\n}\n\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logOutTC} from \"../bll/reducers/Login-Reducer\";\nimport {AppStoreType} from \"../bll/store/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Profile = () => {\n    const dispatch = useDispatch()\n    const userProfile = useSelector<AppStoreType>(state => state.profile)\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.logIn.isLoginIn)\n    const errorMessage = useSelector<AppStoreType, string | null>(state => state.app.error)\n\n    if(!isLoggedIn){\n       return <Redirect to={'/login'}/>\n    }\n\n    const logOut = () => {\n        dispatch(logOutTC())\n    }\nconsole.log(userProfile)\n\n    return (\n        <div>\n            <div> Profile page</div>\n            {/*<img src=\"userProfile.avatar\" alt=\"\"/>*/}\n            <button onClick={logOut}>LogOut</button>\n            <div>{errorMessage && errorMessage}</div>\n        </div>\n    )\n}","import React from 'react';\nimport {NavLink, Switch} from 'react-router-dom';\nimport style from './Header.module.css'\n\nexport const PATH = {\n    loginPage: \"/login\",\n    RecoveryPasswordPage: \"/recoverypassword\",\n    NewPasswordPage: \"/newpassword/:token?\",\n    RegistrationPage: \"/registration\",\n    PreJuniorPage: \"/prejunior\",\n    ErrorPage: \"/404\",\n    Main: \"/\",\n    Redirect: \"*\",\n    Packs: \"/packs\",\n    Cards: \"/cards\"\n\n    // add paths\n}\n\nfunction Header() {\n\n    return (\n        <div className={style.header}>\n            <Switch>\n                <div className={style.nav}>\n                    <ul>\n                        <li><NavLink to={PATH.loginPage}>Login</NavLink></li>\n                        <li><NavLink to={PATH.RecoveryPasswordPage}>Reacovery Password</NavLink></li>\n                        <li><NavLink to={PATH.NewPasswordPage}>New Password</NavLink></li>\n                        <li><NavLink to={PATH.RegistrationPage}>Registration</NavLink></li>\n                        <li><NavLink to={PATH.PreJuniorPage}>PreJunior</NavLink></li>\n                        <li><NavLink to={PATH.Main}>Profile</NavLink></li>\n                        <li><NavLink to={PATH.ErrorPage}>Error Page</NavLink></li>\n                        <li><NavLink to={PATH.Packs}>Packs</NavLink></li>\n                        <li><NavLink to={PATH.Cards}>Cards</NavLink></li>\n                    </ul>\n                </div>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Header;\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    //baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\n// export type APIResponseType<T = {}> = {\n//     data: T\n//     statusText: string\n//     status: number\n// }\n// export type RecoveryPasswordType = {\n//     answer: boolean\n//     html: boolean\n//     info: string\n//     success: boolean\n//\n// }\ntype RecoveryResponseType = {\n    answer: boolean\n    html: boolean\n    success: boolean\n    info: any\n    status: number\n    statusText: string\n    error?: string\n}\nexport type NewPasswordRequestType = {\n    password: string\n    resetPasswordToken: string\n    info: any\n    status: number\n    statusText: string\n}\n\nexport const recoveryAPI = {\n    forgotEmail(email: string) {\n        return instance.post<RecoveryResponseType>('auth/forgot', {\n            email: email,\n            from: \"test-front-admin <crafta.net@gmail.com>\",\n            message: `<div style=\"background-color: darkcyan; padding: 15px\">\n                            password recovery link: \n                     <a href='http://localhost:3000/?#/newpassword/$token$'>Click</a>\n                     </div>`\n        })\n    },\n    resetPassword(password: string, token: string | undefined) {\n        return instance.post<NewPasswordRequestType>('auth/set-new-password', {\n            password,\n            resetPasswordToken: token\n        })\n    },\n}","import {Dispatch} from 'redux'\nimport {recoveryAPI} from \"../../api/recoveryApi\";\n\n\nexport type isDoneType = 'true' | 'false' | 'inProgress'\nconst initialState = {\n    isDone: 'false' as isDoneType,\n    messangeRecInfo: '',\n    error: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const RecoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'STATUS_COMPLETED': {\n            return {...state, isDone: action.value}\n        }\n        case \"RECOVERY_INFO\": {\n            return {...state, messangeRecInfo: action.value}\n        }\n        case \"SET-ERROR\": {\n            return {...state, error: action.error}\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const statusCompletedAC = (value: isDoneType) => ({type: 'STATUS_COMPLETED', value} as const)\nexport const recoveryStatusAC = (value: string) => ({type: 'RECOVERY_INFO', value} as const)\nexport const setAppErrorAC = (error: string) => ({type: 'SET-ERROR', error} as const)\n\n// thunks\nexport const forgotTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(recoveryStatusAC('loading'))\n    recoveryAPI.forgotEmail(email)\n        .then((res) => {\n            if (res.status === 200) {\n                dispatch(statusCompletedAC('inProgress'))\n                dispatch(recoveryStatusAC(res.data.info))\n            } else {\n                dispatch(statusCompletedAC('false'))\n                dispatch(recoveryStatusAC('unexpected error'))\n            }\n        })\n        .catch((err) => {\n            if (err.response) {\n                dispatch(setAppErrorAC(err.response.data.error))\n            } else {\n                dispatch(setAppErrorAC('dangerous mistake'))\n            }\n        }).finally(() => {\n        dispatch(recoveryStatusAC(''))\n    })\n}\nexport const newPasswordTC = (password: string, token: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(recoveryStatusAC('loading'))\n    recoveryAPI.resetPassword(password, token)\n        .then((res) => {\n            if (res.status === 200) {\n                /*dispatch(newPasswordAC(password, token))*/\n                dispatch(statusCompletedAC(\"true\"))\n                dispatch(recoveryStatusAC(res.data.info))\n\n            } else {\n                dispatch(statusCompletedAC('false'))\n                dispatch(recoveryStatusAC('! error'))\n            }\n\n            console.log(res)\n        })\n        .catch((err) => {\n            if (err.response) {\n                dispatch(setAppErrorAC(err.response.data.error))\n            } else {\n                dispatch(setAppErrorAC('dangerous mistake'))\n            }\n        }).finally(() => {\n        dispatch(recoveryStatusAC(''))\n    })\n}\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof statusCompletedAC>\n    | ReturnType<typeof recoveryStatusAC>\n    | ReturnType<typeof setAppErrorAC>\n\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {forgotTC, isDoneType} from \"./RecoveryReducer\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {Redirect} from 'react-router-dom';\nimport {PATH} from \"../../header/Header\";\nimport {useFormik} from \"formik\";\n\n\nexport const RecoveryPassword = () => {\n\n    const isDone = useSelector<AppStoreType, isDoneType>(state => state.recovery.isDone)\n    const recoveryStatus = useSelector<AppStoreType, string>(state => state.recovery.messangeRecInfo)\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    const dispatch = useDispatch()\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: ''\n        },\n        validate: (values) => {\n            const errors: { email?: string } = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(forgotTC(values.email))\n            formik.resetForm()\n        },\n    })\n\n    // redirect\n    if (isDone === 'inProgress') {\n        return <Redirect to={PATH.NewPasswordPage}/>\n    }\n    return <>\n\n        <div> Recovery Password</div>\n\n        <div>{recoveryStatus}</div>\n        <form onSubmit={formik.handleSubmit}>\n            <div> please enter your email</div>\n            <div>\n                <input type={\"text\"} {...formik.getFieldProps(\"email\")} placeholder={\"Email\"}\n                       onBlur={formik.handleBlur}/>\n\n                {formik.touched.email && formik.errors.email\n                    ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\n                    : null}\n            </div>\n            <div>\n                <button type={\"submit\"}>Send</button>\n            </div>\n            <div>{error}</div>\n        </form>\n\n    </>\n\n}\n\n\n","import React from 'react'\nimport {Redirect, useParams} from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isDoneType, newPasswordTC} from \"./RecoveryReducer\";\nimport {AppStoreType} from \"../../bll/store/store\";\nimport {PATH} from \"../../header/Header\";\nimport {useFormik} from \"formik\";\n\ntype FormikErrorType = {\n    password?: string\n    secondPassword?: string\n}\n\nexport const NewPassword = () => {\n\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    const isDone = useSelector<AppStoreType, isDoneType>(state => state.recovery.isDone)\n    const recoveryStatus = useSelector<AppStoreType, string>(state => state.recovery.messangeRecInfo)\n\n    const dispatch = useDispatch()\n    const {token} = useParams<Record<string, string | undefined>>();\n\n    const tokenValue = token ? token : ''\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            secondPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.password !== values.secondPassword) {\n                errors.secondPassword = 'password mismatch'\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'enter the passvord length 7';\n            }\n            if (!values.secondPassword) {\n                errors.secondPassword = 'Required';\n            } else if (values.secondPassword.length < 7) {\n                errors.secondPassword = 'enter the passvord length 7';\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            dispatch(newPasswordTC(values.password, tokenValue))\n            formik.resetForm()\n        },\n\n    })\n\n\n    if (isDone === 'true') {\n        return <Redirect to={PATH.loginPage}/>\n    }\n\n    return <>\n        <div> new Password</div>\n        <div>{recoveryStatus}</div>\n        <form onSubmit={formik.handleSubmit}>\n            <div>\n                <div>\n                    <input type={\"text\"}\n                           {...formik.getFieldProps(\"password\")}\n                           placeholder={\"Password\"}\n                           onBlur={formik.handleBlur}/>\n\n                    {formik.touched.password && formik.errors.password ?\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                </div>\n\n                <div>\n                    <input type={\"text\"}\n                           {...formik.getFieldProps(\"secondPassword\")}\n                           placeholder={\"Password\"}\n                           onBlur={formik.handleBlur}/>\n\n                    {formik.touched.secondPassword && formik.errors.secondPassword ?\n                        <div style={{color: \"red\"}}>{formik.errors.secondPassword}</div> : null}\n                </div>\n            </div>\n            <div>\n                <button type={\"submit\"}>Send</button>\n            </div>\n            <div>{error}</div>\n        </form>\n\n    </>\n\n}","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    //baseURL: 'http://localhost:7542/2.0/',\n    withCredentials: true,\n})\n\n\n\nexport type CardPacksType ={\n    cardsCount: number\n    created: string\n    deckCover: null\n    more_id: string\n    name: string\n    private: boolean\n    updated: string\n    user_id: string\n    user_name: string\n    _id: string\n}\ntype ResponcePacksType={\n    cardPacks:CardPacksType[]\n    cardPacksTotalCount: number\n    maxCardsCount: number\n    minCardsCount: number\n    page: number\n    pageCount: number\n    token: string\n    tokenDeathTime: number\n}\n\nexport type CardsApiType={\n    answer: string\n    cardsPack_id: string\n    comments: string\n    created: string\n    grade: number\n    more_id: string\n    question:string\n    rating: number\n    shots: number\n    type: string\n    updated: string\n    user_id: string\n    __v: string\n    _id: string\n    answerImg: \"\"\n    answerVideo: \"\"\n    questionImg: \"some img\"\n    questionVideo: \"\"\n\n}\nexport const packsAPI = {\n    getCards(cardsPack_id: string | null, page: number, pageCount: number, packName: string='',min?: number, max?: number) {\n\n        return instance.get('cards/card', {\n            params: {\n                cardsPack_id,\n                page,\n                pageCount,\n                packName,\n                min,\n                max\n            }\n        })\n    },\n    getCardPacks(page: number, pageCount: number, packName: string='',min?: number, max?: number) {\n        return instance.get<ResponcePacksType>(`cards/pack?page=${page}&pageCount=${pageCount}&packName=${packName}&min=${min}&max=${max}`);\n    }\n}\n//6053873a338d2c15f075ba5e","import {Dispatch} from 'redux'\nimport {CardPacksType, CardsApiType, packsAPI} from \"../dall/cardsApi\";\nimport {setAppErrorAC} from \"../../../auth/recovery-password/RecoveryReducer\";\n\ntype SortType = {\n    min: number\n    max: number\n}\n\nconst initialState = {\n    cardPacks: [] as Array<CardPacksType>,\n    cardsPack_id: '',\n    cardPacksTotalCount: 14,\n    maxCardsCount: 4,\n    minCardsCount: 0,\n    currentPage: 1,\n    pageSize: 10,\n    packsTotalCount: 5,\n    isLoading: false,\n    sort: {} as SortType,\n    card: [] as CardsApiType[]\n}\n\ntype InitialStateType = typeof initialState\n\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'GET_CARDS_PACKS': {\n            return {...state, cardPacks: action.data}\n        }\n        case \"GET_CARDS_TOTAL_COUNT\": {\n            return {...state, cardPacksTotalCount: action.value}\n        }\n        case \"SET_CURRENT_PAGE\": {\n            return {...state, currentPage: action.value}\n        }\n        case \"SET_PAGE_SIZE\": {\n            return {...state, pageSize: action.size}\n        }\n        case \"SORT_PAGE\": {\n            return {...state, sort: action.sort}\n        }\n        case \"LOADING\":{\n            return {...state, isLoading: action.loading}\n        }\n        case \"GET_CARDS\":{\n            return {...state, card: action.cards}\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const getCardsPacksAC = (data: CardPacksType[]) => ({type: 'GET_CARDS_PACKS', data} as const)\n\nexport const getCcardPacksCountAC = (value: number) => ({type: 'GET_CARDS_TOTAL_COUNT', value} as const)\nexport const setCurrentPageAC = (value: number) => ({type: 'SET_CURRENT_PAGE', value} as const)\nexport const setPageSizeAC = (size: number) => ({type: 'SET_PAGE_SIZE', size} as const)\nexport const sortPacksAC = (sort: SortType) => ({type: 'SORT_PAGE', sort} as const)\nexport const isLoadingAC = (loading: boolean) => ({type: 'LOADING', loading} as const)\nexport const getCardsCC = (cards: []) => ({type: 'GET_CARDS', cards} as const)\n\n\n// thunks\nexport const getPacksTC = (page: number = 1, pageCount: number = 10, packName?: string, min?: number, max?: number) => (dispatch: Dispatch<any>) => {\n    dispatch(setCurrentPageAC(page))\n    dispatch(setPageSizeAC(pageCount))\n    dispatch(isLoadingAC(true))\n\n    packsAPI.getCardPacks(page, pageCount, packName, min, max)\n        .then((res) => {\n            dispatch(getCcardPacksCountAC(res.data.cardPacksTotalCount))\n            dispatch(getCardsPacksAC(res.data.cardPacks))\n            dispatch(isLoadingAC(false))\n            dispatch(getCardsCC([]))\n        }).catch((err) => {\n        if (err.response) {\n            dispatch(setAppErrorAC(err.response.data.error))\n        } else {\n            dispatch(setAppErrorAC('dangerous mistake'))\n        }\n    }).finally(()=>{\n        dispatch(isLoadingAC(false))\n    })\n\n}\n\nexport const getCardsTC = (id:string | null, page: number = 1, pageCount: number = 10, packName?: string, min?: number, max?: number) => (dispatch: Dispatch<any>) => {\n   /* dispatch(setCurrentPageAC(page))\n    dispatch(setPageSizeAC(pageCount))*/\n    dispatch(isLoadingAC(true))\n\n    packsAPI.getCards(id,page,pageCount,packName,min,max)\n        .then((res) => {\n\n            /*dispatch(getCcardPacksCountAC(res.data.cardPacksTotalCount))*/\n            dispatch(getCardsCC(res.data.cards))\n            dispatch(isLoadingAC(false))\n        }).catch((err) => {\n        if (err.response) {\n            dispatch(setAppErrorAC(err.response.data.error))\n        } else {\n            dispatch(setAppErrorAC('dangerous mistake'))\n        }\n    }).finally(()=>{\n        dispatch(isLoadingAC(false))\n    })\n\n}\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof getCardsPacksAC>\n    | ReturnType<typeof getCcardPacksCountAC>\n    | ReturnType<typeof setCurrentPageAC>\n    | ReturnType<typeof setPageSizeAC>\n    | ReturnType<typeof sortPacksAC>\n    | ReturnType<typeof isLoadingAC>\n    | ReturnType<typeof getCardsCC>\n\n\n","import React, {useState} from \"react\";\nimport {Pagination} from \"@material-ui/lab\";\nimport SuperDoubleRange from \"../../../common/c8-SuperDoubleRange/SuperDoubleRange\";\nimport s from'./Pagination.module.css'\n\ntype PaginationType = {\n    cardPacksTotalCount: number\n    pageSize: number\n    findTitle: (page: number, pageSize: number, find: string) => void\n    chengedDoubleRange: (page: number, pageSize: number, find: string, min: number, max: number) => void\n    onChangeselect: (page: number, pageSize: number, find: string) => void\n}\nexport const Paginations: React.FC<PaginationType> = ({\n              cardPacksTotalCount, pageSize,\n              findTitle, chengedDoubleRange, onChangeselect\n\n}) => {\n\n    const pageCount = Math.ceil(cardPacksTotalCount / pageSize)\n    const pages: number[] = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    const [page, setPage] = React.useState(1);\n    const [find, setFind] = useState('')\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(20);\n\n\n    const handleChangeValue = (value: number | number[]) => {\n        if (Array.isArray(value)) {\n            setValue1(value[0])\n            setValue2(value[1])\n        } else {\n            setValue1(value)\n        }\n\n    }\n    const onClickButtonFind =()=>{\n        findTitle(page, pageSize, find)\n        setFind('')\n    }\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        findTitle(page, pageSize, find)\n    };\n    return <>\n        <div className={s.paginationContainer}>\n            <div className={s.blockFinde}>\n                <div>\n                    <input value={find}\n                           onChange={(e) => setFind(e.currentTarget.value)}\n                           placeholder={'sd'}/>\n                    <button onClick={onClickButtonFind}>\n                        find\n                    </button>\n                </div>\n                <div className={s.test}>\n                    <SuperDoubleRange\n                        value={[value1, value2]}\n                        onChangeRange={handleChangeValue}\n                    />\n                    <button onClick={() => {\n                        chengedDoubleRange(page, pageSize, find, value1, value2)\n                    }}>save\n                    </button>\n                </div>\n            </div>\n\n\n            <div className={s.blockPagination}>\n                <div>\n                    <Pagination count={pages.length} page={page} onChange={handleChange}/>\n                </div>\n                <div>\n                    <select onChange={e => onChangeselect(page, Number(e.currentTarget.value), find)}>\n                        <option value={10}>10</option>\n                        <option value={20}>20</option>\n                        <option value={50}>50</option>\n                    </select>\n                </div>\n            </div>\n\n\n        </div>\n\n\n    </>\n}\n/*\n{import  l from '../../../common/c1-LoadingBar/Loading.module.css'\nif(isLoading){\n        return <div className={l.loader}>Loading...</div>\n    }}*/\n","import React, {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../bll/store/store\";\nimport {CardPacksType, CardsApiType} from \"../dall/cardsApi\";\nimport {getCardsTC, getPacksTC} from \"../bll/PacksReducer\";\nimport s from './Packs.module.css'\nimport {Paginations} from \"./Pagination\";\nimport l from '../../../common/c1-LoadingBar/Loading.module.css'\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {PATH} from \"../../../header/Header\";\n\n\nexport function Packs() {\n    const packs = useSelector<AppStoreType, CardPacksType[]>(state => state.packs.cardPacks)\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.packs.isLoading)\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    const cardPacksTotalCount = useSelector<AppStoreType, number>(state => state.packs.cardPacksTotalCount)\n    const pageSize = useSelector<AppStoreType, number>(state => state.packs.pageSize)\n    const currentPage = useSelector<AppStoreType, number>(state => state.packs.currentPage)\n    const dispatch = useDispatch()\n    const cards = useSelector<AppStoreType, CardsApiType[]>(state => state.packs.card)\n\n    useEffect(() => {\n        dispatch(getPacksTC(currentPage, pageSize))\n    }, [])\n\n\n    const findTitle = (page: number, pageSize: number, find: string) => {\n        dispatch(getPacksTC(page, pageSize, find))\n    }\n\n    const chengedDoubleRange = (page: number, pageSize: number, find: string, min: number, max: number) => {\n        dispatch(getPacksTC(page, pageSize, find, min, max))\n    }\n    const onChangeselect = (page: number, pageSize: number, find: string) => {\n        dispatch(getPacksTC(page, pageSize, find))\n    }\n\n    /*if (cards.length > 1) {\n        return <Redirect to={PATH.Cards}/>\n    }*/\n    return (\n\n        <div className={isLoading ? l.loader : ''}>\n\n            <div className={isLoading ? s.err : ''}>\n\n                <Paginations\n                    onChangeselect={onChangeselect}\n                    chengedDoubleRange={chengedDoubleRange}\n                    findTitle={findTitle}\n                    cardPacksTotalCount={cardPacksTotalCount}\n                    pageSize={pageSize}\n                />\n\n\n                <table className={s.table}>\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>cardsCount</th>\n                        <th>updated</th>\n                        <th>bame</th>\n                    </tr>\n                    </thead>\n                    {\n                        packs && packs.map((t) =>\n                            <tbody key={t._id}>\n                            <tr key={t._id}>\n                                <td>{t.user_name}</td>\n                                <td onClick={() => {\n                                    if (t.cardsCount > 0) {\n                                        dispatch(getCardsTC(t._id))\n                                    }\n\n                                }}><NavLink to={PATH.Cards}>{t.cardsCount}</NavLink></td>\n                                <td>{t.updated}</td>\n                                <td>{t.name}</td>\n\n                            </tr>\n                            </tbody>\n                        )}\n                </table>\n            </div>\n            <div>{error}</div>\n        </div>\n    );\n}\n\n/*\nimport React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../bll/store/store\";\nimport {CardPacksType} from \"../dall/cardsApi\";\nimport {getCardsTC} from \"../bll/PacksReducer\";\nimport s from './Packs.module.css'\nimport {Pagination} from \"@material-ui/lab\";\nimport SuperDoubleRange from \"../../../common/c8-SuperDoubleRange/SuperDoubleRange\";\n\n\nexport function Packs() {\n    const packs = useSelector<AppStoreType, CardPacksType[]>(state => state.packs.cardPacks)\n    const dispatch = useDispatch()\n    //\n    const cardPacksTotalCount = useSelector<AppStoreType, number>(state => state.packs.cardPacksTotalCount)\n    const pageSize = useSelector<AppStoreType, number>(state => state.packs.pageSize)\n    const currentPage = useSelector<AppStoreType, number>(state => state.packs.currentPage)\n\n    useEffect(() => {\n        dispatch(getCardsTC(page, pageSize))\n    }, [])\n\n\n    //\n\n    const pageCount = Math.ceil(cardPacksTotalCount / pageSize)\n    const pages: number[] = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    const [page, setPage] = React.useState(1);\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        dispatch(getCardsTC(page, pageSize, find))\n    };\n\n//\n    const [find, setFind] = useState('')\n\n\n    //\n\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(20);\n\n    const handleChangeValue = (value: number | number[]) => {\n        if (Array.isArray(value)) {\n            setValue1(value[0])\n            setValue2(value[1])\n        } else {\n            setValue1(value)\n        }\n\n    }\n\n    return (\n\n\n        <div>\n            <div>\n                <SuperDoubleRange\n                    value={[value1, value2]}\n                    onChangeRange={handleChangeValue}\n                />\n                <button onClick={() => {\n                    dispatch(getCardsTC(page, pageSize, find, value1, value2))\n                }}>save\n                </button>\n            </div>\n\n\n            <input value={find} onChange={(e) => setFind(e.currentTarget.value)} placeholder={'sd'}/>\n            <button onClick={() => {\n                dispatch(getCardsTC(page, pageSize, find))\n            }}>find\n            </button>\n\n\n            {/!*<input onChange={(e) => {\n                dispatch(getCardsTC(page, +e.currentTarget.value))\n            }}/>*!/}\n            <select onChange={e => dispatch(getCardsTC(page, Number(e.currentTarget.value), find))}>\n                <option value={4}>4</option>\n                <option value={7}>7</option>\n                <option value={10}>10</option>\n                <option value={20}>20</option>\n                <option value={50}>50</option>\n            </select>\n\n            <Pagination count={pages.length} page={page} onChange={handleChange}/>\n\n\n            <table className={s.table}>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>cardsCount</th>\n                    <th>updated</th>\n                    <th>bame</th>\n                </tr>\n                </thead>\n                {\n                    packs && packs.map((t) =>\n                        <tbody key={t._id}>\n                        <tr key={t._id}>\n                            <td>{t.user_name}</td>\n                            <td>{t.cardsCount}</td>\n                            <td>{t.updated}</td>\n                            <td>{t.name}</td>\n\n                        </tr>\n                        </tbody>\n                    )}\n\n\n            </table>\n            <div>hi</div>\n\n        </div>\n    );\n}*/\n","import React, {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../bll/store/store\";\nimport {CardPacksType, CardsApiType} from \"../dall/cardsApi\";\nimport {getCardsTC, getPacksTC} from \"../bll/PacksReducer\";\nimport s from './Cards.module.css'\nimport {Paginations} from \"./Pagination\";\nimport l from '../../../common/c1-LoadingBar/Loading.module.css'\n\n\nexport function Cards() {\n    const cards = useSelector<AppStoreType, CardsApiType[]>(state => state.packs.card)\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.packs.isLoading)\n    const error = useSelector<AppStoreType, string>(state => state.recovery.error)\n    const cardPacksTotalCount = useSelector<AppStoreType, number>(state => state.packs.cardPacksTotalCount)\n    const pageSize = useSelector<AppStoreType, number>(state => state.packs.pageSize)\n    const currentPage = useSelector<AppStoreType, number>(state => state.packs.currentPage)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n\n    }, [])\n\ndebugger\n    const findTitle = (page: number, pageSize: number, find: string) => {\n        dispatch(getCardsTC( null,page, pageSize, find))\n    }\n\n    const chengedDoubleRange = (page: number, pageSize: number, find: string, min: number, max: number) => {\n        dispatch(getCardsTC(null,page, pageSize, find, min, max))\n    }\n    const onChangeselect = (page: number, pageSize: number, find: string) => {\n        dispatch(getCardsTC(null,page, pageSize, find))\n    }\n\n\n    return (\n\n        <div className={isLoading ? l.loader : ''}>\n\n            <div className={isLoading ? s.err : ''}>\n\n                <Paginations\n                    onChangeselect={onChangeselect}\n                    chengedDoubleRange={chengedDoubleRange}\n                    findTitle={findTitle}\n                    cardPacksTotalCount={cardPacksTotalCount}\n                    pageSize={pageSize}\n                />\n\n\n                <table className={s.table}>\n                    <thead>\n                    <tr>\n                        <th>Question</th>\n                        <th>Grade</th>\n                        <th>updated</th>\n                        <th>questionImg</th>\n                    </tr>\n                    </thead>\n                    {\n                        cards && cards.map((t) =>\n                            <tbody key={t._id}>\n                            <tr key={t._id}>\n                                <td>{t.question}</td>\n                                <td >{t.grade}</td>\n                                <td>{t.updated}</td>\n                                <td>{t.questionImg}</td>\n\n                            </tr>\n                            </tbody>\n                        )}\n                </table>\n            </div>\n            <div>{error}</div>\n        </div>\n    );\n}\n\n/*\nimport React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../bll/store/store\";\nimport {CardPacksType} from \"../dall/cardsApi\";\nimport {getCardsTC} from \"../bll/PacksReducer\";\nimport s from './Packs.module.css'\nimport {Pagination} from \"@material-ui/lab\";\nimport SuperDoubleRange from \"../../../common/c8-SuperDoubleRange/SuperDoubleRange\";\n\n\nexport function Packs() {\n    const packs = useSelector<AppStoreType, CardPacksType[]>(state => state.packs.cardPacks)\n    const dispatch = useDispatch()\n    //\n    const cardPacksTotalCount = useSelector<AppStoreType, number>(state => state.packs.cardPacksTotalCount)\n    const pageSize = useSelector<AppStoreType, number>(state => state.packs.pageSize)\n    const currentPage = useSelector<AppStoreType, number>(state => state.packs.currentPage)\n\n    useEffect(() => {\n        dispatch(getCardsTC(page, pageSize))\n    }, [])\n\n\n    //\n\n    const pageCount = Math.ceil(cardPacksTotalCount / pageSize)\n    const pages: number[] = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    const [page, setPage] = React.useState(1);\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        dispatch(getCardsTC(page, pageSize, find))\n    };\n\n//\n    const [find, setFind] = useState('')\n\n\n    //\n\n    const [value1, setValue1] = useState<number>(0);\n    const [value2, setValue2] = useState<number>(20);\n\n    const handleChangeValue = (value: number | number[]) => {\n        if (Array.isArray(value)) {\n            setValue1(value[0])\n            setValue2(value[1])\n        } else {\n            setValue1(value)\n        }\n\n    }\n\n    return (\n\n\n        <div>\n            <div>\n                <SuperDoubleRange\n                    value={[value1, value2]}\n                    onChangeRange={handleChangeValue}\n                />\n                <button onClick={() => {\n                    dispatch(getCardsTC(page, pageSize, find, value1, value2))\n                }}>save\n                </button>\n            </div>\n\n\n            <input value={find} onChange={(e) => setFind(e.currentTarget.value)} placeholder={'sd'}/>\n            <button onClick={() => {\n                dispatch(getCardsTC(page, pageSize, find))\n            }}>find\n            </button>\n\n\n            {/!*<input onChange={(e) => {\n                dispatch(getCardsTC(page, +e.currentTarget.value))\n            }}/>*!/}\n            <select onChange={e => dispatch(getCardsTC(page, Number(e.currentTarget.value), find))}>\n                <option value={4}>4</option>\n                <option value={7}>7</option>\n                <option value={10}>10</option>\n                <option value={20}>20</option>\n                <option value={50}>50</option>\n            </select>\n\n            <Pagination count={pages.length} page={page} onChange={handleChange}/>\n\n\n            <table className={s.table}>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>cardsCount</th>\n                    <th>updated</th>\n                    <th>bame</th>\n                </tr>\n                </thead>\n                {\n                    packs && packs.map((t) =>\n                        <tbody key={t._id}>\n                        <tr key={t._id}>\n                            <td>{t.user_name}</td>\n                            <td>{t.cardsCount}</td>\n                            <td>{t.updated}</td>\n                            <td>{t.name}</td>\n\n                        </tr>\n                        </tbody>\n                    )}\n\n\n            </table>\n            <div>hi</div>\n\n        </div>\n    );\n}*/\n","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport {Login} from \"./auth/login/Login\";\nimport {Registration} from \"./auth/registration/Registration\";\nimport PreJunior from \"./pages/PreJunior\";\nimport {Error404} from \"./pages/Error404\";\nimport {Profile} from \"./profile/Profile\";\nimport Header, {PATH} from \"./header/Header\";\nimport {RecoveryPassword} from \"./auth/recovery-password/RecoveryPassword\";\nimport {NewPassword} from \"./auth/recovery-password/NewPassword\";\nimport {Packs} from \"./pages/Card/ui/Packs\";\nimport {Cards} from \"./pages/Card/ui/Cards\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Switch>\n                <Route path={PATH.loginPage} render={() => <Login/>}/>\n                <Route path={PATH.RecoveryPasswordPage} render={() => <RecoveryPassword/>}/>\n                <Route path={PATH.NewPasswordPage} render={() => <NewPassword/>}/>\n                <Route path={PATH.RegistrationPage} render={() => <Registration/>}/>\n                <Route path={PATH.Packs} render={() => <Packs/>}/>\n                <Route path={PATH.Cards} render={() => <Cards/>}/>\n                <Route path={PATH.PreJuniorPage} render={() => <PreJunior/>}/>\n                <Route exact path={PATH.Main} render={() => <Profile/>}/>\n                <Route path={PATH.ErrorPage} render={() => <Error404/>}/>\n                <Redirect from={PATH.Redirect} to={'/404'}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux'\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n\n\n\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"../reducers/profile-reducer\";\nimport {authReducer} from \"../reducers/auth-reducer\";\nimport {RecoveryReducer} from \"../../auth/recovery-password/RecoveryReducer\";\nimport {registrationReducer} from \"../reducers/registration-reducer\";\nimport {loginReducer} from \"../reducers/Login-Reducer\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"../reducers/appReducer\";\nimport {packsReducer} from \"../../pages/Card/bll/PacksReducer\";\n\n\nconst reducers = combineReducers({\n    profile: profileReducer,\n    auth: authReducer,\n    registration: registrationReducer,\n    recovery: RecoveryReducer,\n    logIn: loginReducer,\n    app:appReducer,\n    packs: packsReducer\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store\n\nexport type AppStoreType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store; // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1Xv9a\",\"load6\":\"Loading_load6__10Olr\",\"round\":\"Loading_round__5WduW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Registration_wrapper__1ylfG\",\"btn\":\"Registration_btn__2WfZB\",\"input\":\"Registration_input__3hmKj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationContainer\":\"Pagination_paginationContainer__1GLaD\",\"blockFinde\":\"Pagination_blockFinde__1mmPI\",\"test\":\"Pagination_test__2jOdN\",\"blockPagination\":\"Pagination_blockPagination__2t3nF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__WuyFe\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1wekg\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1KUp7\",\"nav\":\"Header_nav__ud3dh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__3RzFG\",\"err\":\"Packs_err__26yIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Cards_table__2pu3S\",\"err\":\"Cards_err__36cMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__ltQkD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanx\":\"SuperEditableSpan_spanx__1NcIL\",\"superInput\":\"SuperEditableSpan_superInput__1kjns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__3iIEI\"};"],"sourceRoot":""}